-- @path PROV=/ATLProject/metamodels/prov.ecore
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML


module SMD2PROV;
create OUT: PROV from IN: UML;


helper def: documentRoot: PROV!DocumentRoot =
	OclUndefined;

helper def: eventTransitonMap: Map(UML!Transition, UML!Event) = Map{};

helper def: getClassFromSM(sm: UML!StateMachine) : UML!Class=
         UML!Class.allInstances()->select(c | c.classifierBehavior=sm).first();


--foreach one of the events select its transition and store it in the global variable eventTransitionMap
rule selectTransitions() {
	do {
		for (event in UML!Event.allInstances()) {
			for (transition in UML!Transition.allInstances() ) {
				for (transEvent in transition.trigger) {
					if (event = transEvent.event) {
						thisModule.eventTransitonMap.put(event, transition);
					}
				}
			}
		}
	}
}


--Element: Entity
rule genEntity(i:String, state:String, type:String, doc: PROV!Document){
	to	
		att: PROV!PAttribute(key <- 'u2p:state'),
		en:PROV!Entity(id<- i, type<-type, anyAttribute <- att)
	do{
		if(i.equals('var:preObject')){
			att.value<- 'var:sourceState';
		}else if(i ='var:postObject'){
			att.value<- 'var:targetState';
		}
		
		en.anyAttribute <- att;
		doc.entity<-en;
	}
}

-------------------------
-----------------------------

--------------------------
-----------------------------

-----------------------------
rule addAttributeTo(key: String,value: String, element: OclAny){
	to
		attr: PROV!PAttribute (
			key <- key,
			value <- value
		)
	do{
		element.anyAttribute<- attr;
	}
}


rule genWAT(ent: String, ag: PROV!Agent, doc: PROV!Document){
	to
		e: PROV!IDRef (ref <- ent),
		a: PROV!IDRef(ref<- ag.id),
		wat: PROV!Attribution(agent <- a, entity <- e)
	do {
		doc.wasAttributedTo <- wat;
	}
}


--Relationship: wasInvalidatedBy
--	ent - PROV!Entity invalidated by the Activity act
--	act - PROV!Activity which invalidates the Entity ent
--	doc - PROV!Document where WasInvalidatedBy relationship is added
rule genWIB(ent: String, act: PROV!Activity, doc: PROV!Document){
	to
		e: PROV!IDRef (ref <- ent),
		a: PROV!IDRef(ref<- act.id),
		wib: PROV!Invalidation(entity <- e,	activity<- a)
	do {
		doc.wasInvalidatedBy <- wib;
	}
}

--Relationship: wasGeneratedBy
--	ent - PROV!Entity generated by the Activity act
--	act - PROV!Activity which generates the Entity ent
--	doc - PROV!Document where WasGeneratedBy relationship is added
rule genWGB(ent: String, act: PROV!Activity, doc: PROV!Document){
	to
		e: PROV!IDRef (ref <- ent),
		a: PROV!IDRef(ref<- act.id),
		wgb: PROV!Generation(entity <- e,activity<- a)
	do {
		doc.wasGeneratedBy <- wgb;
	}
}

--Relationship: hadMember
--	entTOP - PROV!Entity which is a collection of Entities
--	ent - PROV!Entity which a member of entTOP Entity
--	doc - PROV!Document where hadMember relationship is added
rule hadMember(entTop: String, ent: String, doc: PROV!Document){
	to
		eTop: PROV!IDRef (ref <- entTop),
		e: PROV!IDRef(ref<- ent),
		hm: PROV!Membership(collection <- eTop,	entity<- e)
	do {

		doc.hadMember <- hm;
	}
}

--Relationship: hadMember
--	entTOP - PROV!Entity which is a collection of Entities
--	ent - PROV!Entity which a member of entTOP Entity
--	doc - PROV!Document where hadMember relationship is added
rule genWDF(ent: String, entD: String, doc: PROV!Document){
	to
		e: PROV!IDRef (ref <- ent),
		ed: PROV!IDRef(ref<- entD),
		wdf: PROV!Derivation(usedEntity <- e,generatedEntity<- ed)
	do {
		doc.wasDerivedFrom <- wdf;
	}
}

--Relationship: Used
--	ent - PROV!Entity used by the Activity act
--	act - PROV!Activity which uses the Entity ent
--	doc - PROV!Document where Used relationship is added
rule genSpe(enG:PROV!Entity, en:String, doc:PROV!Document){
	to
		eG: PROV!IDRef (ref <- enG.id),
		e: PROV!IDRef(ref<- en),
		s: PROV!Specialization(generalEntity <- eG, specificEntity <- e)	
	do {
		doc.specializationOf<- s;
	}
}

rule genU(en:String, ac:PROV!Activity, doc:PROV!Document){
	to
		e: PROV!IDRef (ref <- en),
		a: PROV!IDRef(ref<- ac.id),
		u: PROV!Usage(entity <- e,activity<- a)	
	do {
		doc.used<- u;
	}
}




-------------------------
-----------------------------

--------------------------
-----------------------------

-----------------------------
entrypoint rule DocumentRoot() {
	to
		docR: PROV!DocumentRoot
	do {
		thisModule.documentRoot <- docR;	
		---thisModule.selectTransitions();
		
		
		---for (event in thisModule.eventTransitonMap.getKeys()) {
		---	thisModule.transition2Document(event);
		---}
	}
}


rule transition2Document2 {
	from
		trans: UML!Transition
	
	using {
		event:UML!Event = trans.trigger.first().event;
		smdName:String =  thisModule.getClassFromSM(trans.container.stateMachine).name;
		sourceName:String = 'init';
		targetName:String = 'final';
	}	
	to
		ev: PROV!Activity (id<- 'var:operation'),
		ag: PROV!Agent (id<-'var:object'),
		objSMD: PROV!Entity (id<-'var:objectSMD', type<-'u2p:StateMachine'),
		doc: PROV!Document (activity <- ev, agent<-ag, entity<-objSMD)
		
	do {
				ag.type<- 'exe:'+smdName;
				ev.type<- 'exe:'+event.operation.name;
				
				thisModule.genWAT(objSMD.id, ag, doc);
				
		
				---When the transition is external
				if (trans.kind=#external) {

					---From initial pseudostate to state
					
					if (trans.source.oclIsTypeOf(UML!Pseudostate)) {
						if(trans.source.kind=#initial and trans.target.oclIsTypeOf(UML!State)){
							
							targetName <- trans.target.name;
							
							thisModule.genEntity('var:postObject', 'exe:'+trans.target.name, 'exe:'+smdName, doc);
							thisModule.genWGB('var:postObject', ev, doc);
							thisModule.genSpe(objSMD, 'var:postObject', doc);							
						}

					}
					
					---From state to finalState
					if(trans.source.oclIsTypeOf(UML!State) and trans.target.oclIsTypeOf(UML!FinalState)){
						
						sourceName<- trans.source.name;
						
						thisModule.genEntity('var:preObject', 'exe:'+trans.source.name, 'exe:'+smdName, doc);
						thisModule.genU('var:preObject', ev, doc);
						thisModule.genSpe(objSMD, 'var:preObject', doc);
						thisModule.genWIB('var:preObject', ev, doc);

					}
					
					---From state to state
					if(trans.source.oclIsTypeOf(UML!State) and trans.target.oclIsTypeOf(UML!State)){
						
						sourceName<- trans.source.name;
						targetName <- trans.target.name;
						
						thisModule.genEntity('var:preObject', 'exe:'+trans.source.name, 'exe:'+smdName, doc);
						thisModule.genU('var:preObject', ev, doc);
						thisModule.genSpe(objSMD, 'var:preObject', doc);
						thisModule.genWIB('var:preObject', ev, doc);

						
						thisModule.genEntity('var:postObject', 'exe:'+trans.target.name, 'exe:'+smdName, doc);
						thisModule.genWGB('var:postObject', ev, doc);
						thisModule.genSpe(objSMD, 'var:postObject', doc);
						
						thisModule.genWDF('var:preObject', 'var:postObject', doc);
					}

				}
				
				---When the transition is internal
				if (trans.kind.toString()=#internal) {
					
					thisModule.genEntity('var:compState', '', 'exe:'+smdName, doc);
					thisModule.genSpe(objSMD, 'var:compState', doc);
					
					---From initial pseudostate to state
					if (trans.source.oclIsTypeOf(UML!Pseudostate) and  trans.source.kind=#initial and trans.target.oclIsTypeOf(UML!State)) {
						
						targetName <- trans.target.name;
						
						thisModule.genEntity('var:postObject', 'exe:'+trans.target.name, 'exe:'+smdName, doc);
						thisModule.genWGB('var:postObject', ev, doc);
						thisModule.hadMember('var:compState', 'var:postObject', doc);
					}
					
					---From state to finalState
					if(trans.source.oclIsTypeOf(UML!State) and trans.target.oclIsTypeOf(UML!FinalState)){
						
						sourceName<- trans.source.name;
						
						thisModule.genEntity('var:preObject', 'exe:'+trans.source.name, 'exe:'+smdName, doc);
						thisModule.genU('var:preObject', ev, doc);
						thisModule.hadMember('var:compState', 'var:postObject', doc);
						thisModule.genWIB('var:preObject', ev, doc);
					}
					
					if(trans.source.oclIsTypeOf(UML!State) and trans.target.oclIsTypeOf(UML!State)){
						
						sourceName<- trans.source.name;
						targetName <- trans.target.name;
						
						
						thisModule.genEntity('var:preObject', 'exe:'+trans.source.name, 'exe:'+smdName, doc);
						thisModule.genU('var:preObject', ev, doc);
						thisModule.hadMember('var:compState', 'var:postObject', doc);
						thisModule.genWIB('var:preObject', ev, doc);
						
						thisModule.genEntity('var:postObject', 'exe:'+trans.target.name, 'exe:'+smdName, doc);
						thisModule.genWGB('var:postObject', ev, doc);
						thisModule.hadMember('var:compState', 'var:postObject', doc);
						
						thisModule.genWDF('var:preObject', 'var:postObject', doc);
					}

				}
				if(smdName = event.operation.name){
					doc.id <- smdName+'_new_'+sourceName+'-'+targetName;
				}else{
					doc.id <- smdName+'_'+event.operation.name+'_'+sourceName+'-'+targetName;
				}
				thisModule.documentRoot.document<-doc;	
	}
}



