package es.unirioja.uml2prov.xtend;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import es.unirioja.uml2prov.utilities.AspectConstructor;
import es.unirioja.uml2prov.utilities.UML2PROV_VARIABLES;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.uml2.uml.Model;
import org.eclipse.uml2.uml.Namespace;
import org.eclipse.uml2.uml.Operation;
import org.eclipse.uml2.uml.UMLPackage;
import org.eclipse.uml2.uml.resource.UMLResource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

@SuppressWarnings("all")
public class AspectGenerator {
  public static final String PATH_UML2PROV_BGM = "/es/unirioja/uml2prov/bgm";
  
  public static void generateBGM(final String propertiesFile, final String[] interfaceImpl, final String outputDirectory) {
    try {
      ResourceSetImpl resourceSet = new ResourceSetImpl();
      resourceSet.getPackageRegistry().put(UMLPackage.eNS_URI, UMLPackage.eINSTANCE);
      resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(UMLResource.FILE_EXTENSION, UMLResource.Factory.INSTANCE);
      resourceSet.getPackageRegistry().put("http://www.eclipse.org/uml2/5.0.0/UML", UMLPackage.eINSTANCE);
      Resource res = resourceSet.getResource(URI.createFileURI(propertiesFile), true);
      new File(((outputDirectory + AspectGenerator.PATH_UML2PROV_BGM) + "/aspect")).mkdirs();
      new File((outputDirectory + "/dependencies")).mkdirs();
      File _file = new File(((outputDirectory + AspectGenerator.PATH_UML2PROV_BGM) + "/aspect/BGMEventInstrumenter.aj"));
      PrintStream provenanceExtractorAJ = new PrintStream(_file);
      provenanceExtractorAJ.println(AspectGenerator.init(interfaceImpl));
      Iterable<Model> _filter = Iterables.<Model>filter(res.getContents(), Model.class);
      for (final Model element : _filter) {
        {
          provenanceExtractorAJ.println(AspectGenerator.parents(element, true));
          provenanceExtractorAJ.println(AspectGenerator.news(element, true));
          provenanceExtractorAJ.println(AspectGenerator.operations(element, true));
          provenanceExtractorAJ.println();
          provenanceExtractorAJ.println(AspectGenerator.beforeBlock(element));
          provenanceExtractorAJ.println();
          provenanceExtractorAJ.println(AspectGenerator.afterBlock(element));
          provenanceExtractorAJ.println();
          provenanceExtractorAJ.println(AspectGenerator.aroundBlock(element));
        }
      }
      provenanceExtractorAJ.println(AspectGenerator.codeMethodsDeclarationAJ());
      provenanceExtractorAJ.close();
      File _file_1 = new File(((outputDirectory + AspectGenerator.PATH_UML2PROV_BGM) + "/aspect/UUID.java"));
      PrintStream _printStream = new PrintStream(_file_1);
      provenanceExtractorAJ = _printStream;
      provenanceExtractorAJ.println(AspectConstructor.generateUUID());
      provenanceExtractorAJ.close();
      File _file_2 = new File(((outputDirectory + AspectGenerator.PATH_UML2PROV_BGM) + "/BGMEvent.java"));
      PrintStream _printStream_1 = new PrintStream(_file_2);
      provenanceExtractorAJ = _printStream_1;
      provenanceExtractorAJ.println(AspectConstructor.generateBGMEvent());
      provenanceExtractorAJ.close();
      File _file_3 = new File(((outputDirectory + AspectGenerator.PATH_UML2PROV_BGM) + "/EventHelper.java"));
      PrintStream _printStream_2 = new PrintStream(_file_3);
      provenanceExtractorAJ = _printStream_2;
      provenanceExtractorAJ.println(AspectConstructor.generateEventHelper());
      provenanceExtractorAJ.close();
      File _file_4 = new File(((outputDirectory + AspectGenerator.PATH_UML2PROV_BGM) + "/BGMEventListener.java"));
      PrintStream _printStream_3 = new PrintStream(_file_4);
      provenanceExtractorAJ = _printStream_3;
      provenanceExtractorAJ.println(AspectConstructor.generateBGMEventListener());
      provenanceExtractorAJ.close();
      File _file_5 = new File((outputDirectory + "/dependencies/org.aspectj.runtime_1.9.2.201811011643.jar"));
      FileOutputStream target = new FileOutputStream(_file_5);
      AspectConstructor.copiar(AspectConstructor.getJarDependency(), target);
      target.close();
      File _file_6 = new File((outputDirectory + "/model.profile.uml"));
      FileOutputStream _fileOutputStream = new FileOutputStream(_file_6);
      target = _fileOutputStream;
      AspectConstructor.copiar(AspectConstructor.getProfileUML2PROV(), target);
      target.close();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public static StringBuffer operations(final EObject root, final boolean searchForNestedNodes) {
    int i = 0;
    int j = 0;
    StringBuffer result = new StringBuffer();
    TreeIterator<EObject> iter = root.eAllContents();
    while (iter.hasNext()) {
      {
        EObject obj = iter.next();
        if ((obj instanceof org.eclipse.uml2.uml.Class)) {
          int _compareTo = ((org.eclipse.uml2.uml.Class)obj).getClass().getCanonicalName().compareTo("org.eclipse.uml2.uml.internal.impl.ClassImpl");
          boolean _equals = (_compareTo == 0);
          if (_equals) {
            boolean _isEmpty = ((org.eclipse.uml2.uml.Class)obj).getOperations().isEmpty();
            boolean _not = (!_isEmpty);
            if (_not) {
              String _name = ((org.eclipse.uml2.uml.Class)obj).getName();
              String _plus = ("pointcut captureOperations" + _name);
              String _plus_1 = (_plus + "(): ");
              result.append(_plus_1);
              EList<Operation> _operations = ((org.eclipse.uml2.uml.Class)obj).getOperations();
              for (final Operation operation : _operations) {
                {
                  CharSequence _Namespaces = AspectGenerator.Namespaces(((Namespace)obj));
                  String _plus_2 = ("\tcall(* " + _Namespaces);
                  String _plus_3 = (_plus_2 + ".");
                  String _name_1 = operation.getName();
                  String _plus_4 = (_plus_3 + _name_1);
                  String _plus_5 = (_plus_4 + "(..))");
                  result.append(_plus_5);
                  boolean _equals_1 = IterableExtensions.<Operation>last(((org.eclipse.uml2.uml.Class)obj).getOperations()).equals(operation);
                  boolean _not_1 = (!_equals_1);
                  if (_not_1) {
                    result.append(" || ");
                  } else {
                    result.append(";\n");
                  }
                }
              }
              iter.prune();
            }
          }
        }
      }
    }
    result.append(" ;");
    return result;
  }
  
  public static StringBuffer aroundBlock(final EObject root) {
    StringBuffer result = new StringBuffer();
    result.append("Object around(Identified targetIdentified): target(targetIdentified) &&  !execution(* *.getUUID()) && !execution(* *.setUUID()) && (");
    result.append(AspectGenerator.pointCutsOperations(root, true));
    result.append("){\n");
    result.append(AspectGenerator.codeInsideAround());
    result.append("}");
    return result;
  }
  
  public static StringBuffer pointCutsOperations(final EObject root, final boolean searchForNestedNodes) {
    int i = 0;
    int j = 0;
    StringBuffer result = new StringBuffer();
    final Function1<EObject, Boolean> _function = (EObject e) -> {
      int _compareTo = e.getClass().getName().compareTo("org.eclipse.uml2.uml.internal.impl.ClassImpl");
      return Boolean.valueOf((_compareTo == 0));
    };
    Iterator<EObject> iter = IteratorExtensions.<EObject>filter(root.eAllContents(), _function);
    while (iter.hasNext()) {
      {
        EObject obj = iter.next();
        if ((obj instanceof org.eclipse.uml2.uml.Class)) {
          int _compareTo = ((org.eclipse.uml2.uml.Class)obj).getClass().getCanonicalName().compareTo("org.eclipse.uml2.uml.internal.impl.ClassImpl");
          boolean _equals = (_compareTo == 0);
          if (_equals) {
            String _name = ((org.eclipse.uml2.uml.Class)obj).getName();
            String _plus = ("captureOperations" + _name);
            String _plus_1 = (_plus + "()");
            result.append(_plus_1);
            boolean _hasNext = iter.hasNext();
            if (_hasNext) {
              result.append(" || \n");
            }
          }
        }
      }
    }
    return result;
  }
  
  public static StringBuffer beforeBlock(final EObject root) {
    StringBuffer result = new StringBuffer();
    result.append(
      "before(Identified targetIdentified) : this(targetIdentified) &&  !execution(* *.setUUID()) && !execution(* *.getUUID()) && (");
    result.append("captureNews0()");
    result.append("){\n");
    result.append(AspectGenerator.codeInsideBefore());
    result.append("}");
    return result;
  }
  
  public static StringBuffer afterBlock(final EObject root) {
    StringBuffer result = new StringBuffer();
    result.append(
      "after(Identified targetIdentified) : this(targetIdentified) &&  !execution(* *.setUUID()) && !execution(* *.getUUID()) && (");
    result.append("captureNews0()");
    result.append("){\n");
    result.append(AspectGenerator.codeInsideAfter());
    result.append("}");
    return result;
  }
  
  public static StringBuffer news(final EObject root, final boolean searchForNestedNodes) {
    int i = 0;
    int j = 0;
    StringBuffer result = new StringBuffer();
    final Function1<EObject, Boolean> _function = (EObject e) -> {
      int _compareTo = e.getClass().getName().compareTo("org.eclipse.uml2.uml.internal.impl.ClassImpl");
      return Boolean.valueOf((_compareTo == 0));
    };
    Iterator<EObject> iter = IteratorExtensions.<EObject>filter(root.eAllContents(), _function);
    result.append((("pointcut captureNews" + Integer.valueOf(j)) + "(): "));
    while (iter.hasNext()) {
      {
        EObject obj = iter.next();
        if ((obj instanceof org.eclipse.uml2.uml.Class)) {
          CharSequence _Namespaces = AspectGenerator.Namespaces(((Namespace)obj));
          String _plus = ("initialization(" + _Namespaces);
          String _plus_1 = (_plus + ".new(..))");
          result.append(_plus_1);
          boolean _hasNext = iter.hasNext();
          if (_hasNext) {
            result.append(" || \n");
          }
        }
      }
    }
    result.append(" ;\n");
    return result;
  }
  
  public static StringBuffer parents(final EObject root, final boolean searchForNestedNodes) {
    StringBuffer result = new StringBuffer();
    TreeIterator<EObject> iter = root.eAllContents();
    while (iter.hasNext()) {
      {
        EObject obj = iter.next();
        if ((obj instanceof org.eclipse.uml2.uml.Class)) {
          int _compareTo = ((org.eclipse.uml2.uml.Class)obj).getClass().getCanonicalName().compareTo("org.eclipse.uml2.uml.internal.impl.ClassImpl");
          boolean _equals = (_compareTo == 0);
          if (_equals) {
            CharSequence _Namespaces = AspectGenerator.Namespaces(((Namespace)obj));
            String _plus = ("declare parents : " + _Namespaces);
            String _plus_1 = (_plus + " implements Identified;\n");
            result.append(_plus_1);
            iter.prune();
          }
        }
      }
    }
    return result;
  }
  
  public static Object getFirstNamespace(final Namespace cl) {
    Object _xifexpression = null;
    Namespace _namespace = cl.getNamespace();
    boolean _equals = Objects.equal(_namespace, null);
    if (_equals) {
      return cl.getName();
    } else {
      _xifexpression = AspectGenerator.getFirstNamespace(cl.getNamespace());
    }
    return _xifexpression;
  }
  
  public static CharSequence Namespaces(final Namespace cl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Namespace _namespace = cl.getNamespace();
      boolean _equals = Objects.equal(_namespace, null);
      if (_equals) {
      }
    }
    {
      Namespace _namespace_1 = cl.getNamespace();
      boolean _notEquals = (!Objects.equal(_namespace_1, null));
      if (_notEquals) {
        Object _Namespaces = AspectGenerator.Namespaces(cl.getNamespace());
        _builder.append(_Namespaces);
        {
          Namespace _namespace_2 = cl.getNamespace().getNamespace();
          boolean _notEquals_1 = (!Objects.equal(_namespace_2, null));
          if (_notEquals_1) {
            _builder.append(".");
          }
        }
        String _name = cl.getName();
        _builder.append(_name);
      }
    }
    return _builder;
  }
  
  public static CharSequence init(final String[] interfImp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package es.unirioja.uml2prov.bgm.aspect;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.lang.reflect.InvocationTargetException;");
    _builder.newLine();
    _builder.append("import java.lang.reflect.Method;");
    _builder.newLine();
    _builder.append("import java.util.AbstractCollection;");
    _builder.newLine();
    _builder.append("import java.util.AbstractMap.SimpleEntry;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.Date;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.HashSet;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import java.util.Stack;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ExecutorService;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Executors;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ThreadFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.aspectj.lang.reflect.MethodSignature;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import es.unirioja.uml2prov.bgm.BGMEvent;");
    _builder.newLine();
    _builder.append("import es.unirioja.uml2prov.bgm.EventHelper;");
    _builder.newLine();
    _builder.append("import es.unirioja.uml2prov.bgm.BGMEventListener;");
    _builder.newLine();
    _builder.append("//import ");
    _builder.append(interfImp);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public aspect BGMEventInstrumenter {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ExecutorService exec = Executors.newFixedThreadPool(16, new ThreadFactory() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public Thread newThread(Runnable r) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread t = Executors.defaultThreadFactory().newThread(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("t.setDaemon(true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return t;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//ExecutorService exec = MoreExecutors.getExitingExecutorService(");
    _builder.newLine();
    _builder.append("//      (ThreadPoolExecutor) Executors.newFixedThreadPool(8), ");
    _builder.newLine();
    _builder.append("//      100_000, TimeUnit.DAYS//period after which executor will be automatically closed");
    _builder.newLine();
    _builder.append("//                           //I assume that 100_000 days is enough to simulate infinity");
    _builder.newLine();
    _builder.append("//);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Integer n = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Long sum = new Long(0);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public interface Identified {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private UUID Identified.uuid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String Identified.stateSM = new String();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void Identified.setUUID(UUID uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.uuid = uuid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public UUID Identified.getUUID() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return uuid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void Identified.setStateSM(String state) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.stateSM = state;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String Identified.getStateSM() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return stateSM;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static class IdentifiersManager {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private static Set<Class> WRAPPER_TYPES = new HashSet(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Arrays.asList(String.class, Boolean.class, Character.class, Byte.class, Short.class, Integer.class,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Long.class, Float.class, Double.class, Void.class));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// static Map<Object, UUID> objectIdentifier = new WeakHashMap<Object, UUID>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private static boolean isWrapperType(Class clazz) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return WRAPPER_TYPES.contains(clazz);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("static String incrementIdentifier(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String rslt;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!Identified.class.isAssignableFrom(obj.getClass())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rslt = new UUID(obj).incrementUUID();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rslt = ((Identified) obj).getUUID().incrementUUID();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return rslt;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("static UUID getIdentifier(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("UUID rtn = null;");
    _builder.newLine();
    _builder.append("//    \t\tif(obj instanceof Identified){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (Identified.class.isAssignableFrom(obj.getClass())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (((Identified) obj).getUUID() == null)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("((Identified) obj).setUUID(new UUID(obj));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rtn = ((Identified) obj).getUUID();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rtn = new UUID(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return rtn;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("////    \t\tSystem.out.println(rtn.getCompleteUUID());");
    _builder.newLine();
    _builder.append("//    \t\tlong swTime= sw.elapsedTime();");
    _builder.newLine();
    _builder.append("//    \t\tSystem.out.println(\"[Parallel] \"+ swTime);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//    \t\tUUID rtn = null;");
    _builder.newLine();
    _builder.append("//    \t\tif(obj instanceof Identified){");
    _builder.newLine();
    _builder.append("//    \t\t\trtn = ((Identified)obj).getUUID();");
    _builder.newLine();
    _builder.append("//    \t\t}else{");
    _builder.newLine();
    _builder.append("//    \t\t\trtn = objectIdentifier.get(obj);");
    _builder.newLine();
    _builder.append("//    \t\t\tif (rtn == null) {");
    _builder.newLine();
    _builder.append("//    \t\t\t\trtn = new UUID(obj);");
    _builder.newLine();
    _builder.append("//    \t\t\t\tobjectIdentifier.put(obj, rtn);");
    _builder.newLine();
    _builder.append("//    \t\t\t}");
    _builder.newLine();
    _builder.append("//    \t\t}");
    _builder.newLine();
    _builder.append("//    \t\t");
    _builder.newLine();
    _builder.append("//    \t\treturn rtn;");
    _builder.newLine();
    _builder.append("//    \t}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("static synchronized public String randomUUID() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return UUID.randomUUID();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("static public UUID newUUID(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("UUID uuid = new UUID(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return uuid;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static class StateManager {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("synchronized static void newState(Object obj, String state) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (Identified.class.isAssignableFrom(obj.getClass())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("((Identified) obj).setStateSM(state);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("synchronized static String getState(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (obj instanceof Identified) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return ((Identified) obj).getStateSM();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return \"noState\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// send the eventes");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static EventHelper<BGMEventListener> bgmm = new EventHelper<>(BGMEventListener.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// identificador de la ejecucion (del binding)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String EXECUTION_ID = IdentifiersManager.randomUUID();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// represents the deeper level of the last method executed");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static Integer level = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// it is a boolean which allows us to know if the level has ended");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// realmente no se como llamarlo, es algo parecido a un semaforo que me dice");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// si el nivel ha finalizado o no.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static Boolean previousMethod = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static long timeNestedMethods = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// por cada nivel");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// <nombreClase>.<nombreMetodo>@<idMessage>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// <replyMessageID>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ArrayList<List<SimpleEntry<String, String>>> returnsArray;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// por cada nivel");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// <nombreClase>.<nombreMetodo>@<idMessage>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// time");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ArrayList<List<SimpleEntry<String, Long>>> returnsArrayTimes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// por cada nivel");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// <nombreClase>.<nombreMetodo>@<idMessage>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// <starter>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ArrayList<List<SimpleEntry<String, String>>> startersArray;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// identificadores de los objetos, por nivel");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ArrayList<String> objIdArray = new ArrayList<String>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// variable que guarda en memoria el fichero de propiedades");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static HashMap<String, String> propertiesMemory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static HashMap<String, List<String>> propertiesMemoryAttributes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static {");
    _builder.newLine();
    {
      for(final String element : interfImp) {
        _builder.append("\t\t");
        _builder.append("bgmm.addListener(new ");
        _builder.append(element, "\t\t");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("returnsArray = new ArrayList<List<SimpleEntry<String, String>>>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("startersArray = new ArrayList<List<SimpleEntry<String, String>>>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("returnsArrayTimes = new ArrayList<List<SimpleEntry<String, Long>>>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\t\t\tProperties properties = new Properties();");
    _builder.newLine();
    _builder.append("//\t\t\tproperties.load(new FileInputStream(\"src/aspects/pp.properties\"));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("propertiesMemory = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("propertiesMemoryAttributes = new HashMap<String, List<String>>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LoadProperties.loadProperties(propertiesMemory, propertiesMemoryAttributes);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("//\t\t\tfor (Object key : properties.keySet()) {");
    _builder.newLine();
    _builder.append("//\t\t\t\tif (((String) key).contains(\".attributes\")) {");
    _builder.newLine();
    _builder.append("//\t\t\t\t\tpropertiesMemoryAttributes.put((String) key,Arrays.asList(properties.getProperty((String) key).split(\"\\\\|\")));");
    _builder.newLine();
    _builder.append("//\t\t\t\t} else {");
    _builder.newLine();
    _builder.append("//\t\t\t\t\tpropertiesMemory.put((String) key, properties.getProperty((String) key));");
    _builder.newLine();
    _builder.append("//\t\t\t\t}");
    _builder.newLine();
    _builder.append("//\t\t\t}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\t\t} catch (IOException e) {");
    _builder.newLine();
    _builder.append("//\t\t\te.printStackTrace();");
    _builder.newLine();
    _builder.append("//\t\t}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// identificador del mensaje (operacion)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String id_msg_new = \"\";");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence codeInsideBefore() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("UUID id = new UUID(thisJoinPoint.getTarget());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("((Identified)thisJoinPoint.getTarget()).setUUID(id);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String className = thisJoinPoint.getTarget().getClass().getSimpleName();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Boolean inSequence = (propertiesMemory.get(className+\".\"+className+\".seqD\")!=null)?true:false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Boolean inClass =  (propertiesMemory.get(className+\".\"+className+\".classD\")!=null)?true:false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Boolean inState=  (propertiesMemory.get(className+\".\"+className+\".stD\")!=null)?true:false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//identificador del mensaje (operacion)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("id_msg_new = id.getClss()+\"-new-\"+id.getUUID();\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("BGMEvent initMethod = new BGMEvent(thisJoinPoint.getTarget(), EXECUTION_ID, thisJoinPoint.getTarget().getClass().getSimpleName(), id_msg_new);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initMethod.setState(\"init\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bgmm.fireEvent(\"operationStart\",initMethod);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (InvocationTargetException e) {e.printStackTrace();}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//devuelve variable reflejando el starter de la operacion");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(inSequence){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String starter = this.beforeManagement((Identified)thisJoinPoint.getTarget(),thisJoinPoint.getTarget().getClass().getSimpleName(), id_msg_new);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getStarterVariable((Identified)thisJoinPoint.getTarget(), id_msg_new, starter);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//inicio operacion");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("provenance(EXECUTION_ID, (Identified)thisJoinPoint.getTarget(), id_msg_new, \"");
    _builder.append(UML2PROV_VARIABLES.OPERATIONSTARTTIME, "\t");
    _builder.append("\",String.valueOf(new Date().getTime()));");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence codeInsideAfter() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("UUID id = IdentifiersManager.getIdentifier(thisJoinPoint.getTarget());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final String ID_MSG = id.getClss()+\"-new-\"+id.getUUID();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String className = thisJoinPoint.getTarget().getClass().getSimpleName();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean inSequence = (propertiesMemory.get(className+\".\"+className+\".seqD\")!=null)?true:false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean inClass =  (propertiesMemory.get(className+\".\"+className+\".classD\")!=null)?true:false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean inState=  (propertiesMemory.get(className+\".\"+className+\".stD\")!=null)?true:false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BGMEvent initMethod = new BGMEvent(thisJoinPoint.getTarget(), EXECUTION_ID, thisJoinPoint.getTarget().getClass().getSimpleName(), ID_MSG);\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final Identified targetIdentifierAux = (Identified)thisJoinPoint.getTarget();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (targetIdentifierAux != null) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//cuando finaliza la operacion");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, targetIdentifierAux, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OPERATIONENDTIME, "\t\t\t");
    _builder.append("\", String.valueOf(new Date().getTime()));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, targetIdentifierAux, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OPERATION, "\t\t\t");
    _builder.append("\", ID_MSG);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getInputVariableNews(targetIdentifierAux, thisJoinPoint.getArgs(), ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(inSequence) getnewRequestNews(targetIdentifierAux, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(inClass) getAttributesNews(targetIdentifierAux, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(inState) getTargetStateNews(targetIdentifierAux, initMethod);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("//\t\t\t// ------------------ target variable");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, (Identified)thisJoinPoint.getTarget(), ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("ID_MSG, ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"");
    _builder.append(UML2PROV_VARIABLES.POSTOBJECT, "\t\t\t\t\t");
    _builder.append("\", ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("IdentifiersManager.getIdentifier(thisJoinPoint.getTarget()).getCompleteUUID());");
    _builder.newLine();
    _builder.append("//\t\t\t// ------------------ target variable");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(inSequence) this.afterManagement(targetIdentifierAux, thisJoinPoint.getTarget().getClass().getSimpleName() , ID_MSG, IdentifiersManager.randomUUID());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bgmm.fireEvent(\"operationEnd\",initMethod);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (InvocationTargetException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("n++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence codeInsideAround() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("final Method method = ((MethodSignature) thisJoinPoint.getSignature()).getMethod();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final Identified target = targetIdentified;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String methodName = method.getName();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String className = target.getClass().getSimpleName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final String ID_MSG = className + \"-\" + methodName + \"-\" + IdentifiersManager.randomUUID();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean inSequence = (propertiesMemory.get(className + \".\" + methodName + \".seqD\") != null) ? true : false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean inClass = (propertiesMemory.get(className + \".\" + methodName + \".classD\") != null) ? true : false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean inState = (propertiesMemory.get(className + \".\" + methodName + \".stD\") != null) ? true : false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (target != null) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BGMEvent initMethod = new BGMEvent(targetIdentified, EXECUTION_ID,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("targetIdentified.getClass().getSimpleName(), ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("initMethod.setState(getCurrentState(targetIdentified));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bgmm.fireEvent(\"operationStart\", initMethod);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (InvocationTargetException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final String sourceID = IdentifiersManager.getIdentifier(target).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// provenance before execution");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String starter = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (inSequence)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("starter = this.beforeManagement(target, method.getName(), ID_MSG);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenanceBeforeExecution(target, method, thisJoinPoint.getArgs(), ID_MSG, starter, inSequence, inClass,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("inState);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, targetIdentified, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OPERATIONSTARTTIME, "\t\t\t");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("String.valueOf(new Date().getTime()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final Object rtn = proceed(targetIdentified);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, targetIdentified, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OPERATIONENDTIME, "\t\t\t");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("String.valueOf(new Date().getTime()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// provenance after execution");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenanceAfterExecution(target, method, thisJoinPoint.getArgs(), ID_MSG, rtn, sourceID, inSequence,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("inClass, inState);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (inSequence)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("afterManagement(target, method.getName(), ID_MSG, IdentifiersManager.randomUUID());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\t\tSystem.err.print(\"-\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("n++;");
    _builder.newLine();
    _builder.append("//\t\tsum = sum + (timeAround-timeProceed);");
    _builder.newLine();
    _builder.append("//\t\tSystem.err.println(\"Mean: \"+sum/n);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\t\tStringBuffer sb = new StringBuffer();");
    _builder.newLine();
    _builder.append("//\t\tsb.append(\"-------------------------------------------------------\");");
    _builder.newLine();
    _builder.append("//\t\tsb.append(\"\\nreturnsArray: \"+returnsArray.size());");
    _builder.newLine();
    _builder.append("//\t\tsb.append(\"\\nreturnsArrayTimes: \"+returnsArrayTimes.size());");
    _builder.newLine();
    _builder.append("//\t\tsb.append(\"\\nstartersArray: \"+startersArray.size());");
    _builder.newLine();
    _builder.append("//\t\tsb.append(\"\\nobjIdArray: \"+objIdArray.size());");
    _builder.newLine();
    _builder.append("//\t\tsb.append(\"\\n-------------------------------------------------------\");");
    _builder.newLine();
    _builder.append("//\t\tSystem.out.println(sb);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return rtn;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Object rtn = proceed(targetIdentified);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return rtn;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence codeMethodsDeclarationAJ() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private void getStarterVariable(Identified target, String ID_MSG, String starter) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.STARTER, "\t");
    _builder.append("\", starter);\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.newLine();
    _builder.append("private void getInputVariableNews(Identified target, Object[] args, String ID_MSG ){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (Object arg : args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (arg != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (arg instanceof AbstractCollection) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("((AbstractCollection<Object>) arg).stream().forEach(element -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(element!=null){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String completeID = IdentifiersManager.getIdentifier(element).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.INPUT, "\t\t\t\t\t\t");
    _builder.append("\",\tcompleteID);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.INPUTVALUE, "\t\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID,ID_MSG,completeID, \"value\",element.toString());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    String _typeName = UML2PROV_VARIABLES.class.getTypeName();
    _builder.append(_typeName, "\t\t\t\t\t\t");
    _builder.append("\",EXECUTION_ID,ID_MSG,completeID, \"type\",element.getClass().getTypeName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String completeID = IdentifiersManager.getIdentifier(arg).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.INPUT, "\t\t\t\t");
    _builder.append("\",IdentifiersManager.getIdentifier(arg).getCompleteUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.INPUTVALUE, "\t\t\t\t");
    _builder.append("\", EXECUTION_ID, ID_MSG,completeID,\"value\", arg.toString());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.INPUTTYPE, "\t\t\t\t");
    _builder.append("\", EXECUTION_ID,ID_MSG, completeID,\"type\", arg.getClass().getTypeName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("private void getnewRequestNews(Identified target, String ID_MSG){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("///associated with sequence (operaciones a las que ha llamado)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (!previousMethod) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<String, String>> starterLevel = startersArray.get(level);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ newRequest variable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < starterLevel.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.NESTEDREQUEST, "\t\t\t");
    _builder.append("\", starterLevel.get(i).getValue());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ newRequest variable");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("///end sequence");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getAttributesNews(Identified target, String ID_MSG) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Arrays.asList(target.getClass().getDeclaredFields()).stream()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".filter(field -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(field==null || propertiesMemoryAttributes.get(target.getClass().getSimpleName()+\".attributes\")==null){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return propertiesMemoryAttributes.get(target.getClass().getSimpleName()+\".attributes\").contains(field.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}) //only those fields included in the diagram");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".forEach(field -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("field.setAccessible(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (field.get(target) != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String fieldUUID;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("fieldUUID = IdentifiersManager.getIdentifier(field.get(target)).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String fieldValue = (field.get(target) != null) ? field.get(target).toString() : \"Null\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String fieldType = (field.get(target) != null) ? field.getType().getSimpleName() : \"Null\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.ATTRIBUTE, "\t\t\t\t\t\t\t");
    _builder.append("\", fieldUUID);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.ATTRIBUTEVALUE, "\t\t\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID, ID_MSG, fieldUUID, \"value\", fieldValue);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.ATTRIBUTETYPE, "\t\t\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID, ID_MSG, fieldUUID, \"type\", fieldType);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.ATTRIBUTENAME, "\t\t\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID, ID_MSG, fieldUUID, \"attName\", field.getName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (IllegalArgumentException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (IllegalAccessException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getTargetStateNews(Identified target, BGMEvent initMethod){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//target state (el valor)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String targetState = getInitialState(target);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//target state (el valor)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!targetState.isEmpty()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID,target, id_msg_new, \"");
    _builder.append(UML2PROV_VARIABLES.TARGETSTATE, "\t\t\t");
    _builder.append("\", targetState);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initMethod.setState(targetState);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getSourceVariable(Identified target, String ID_MSG){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.PREOBJECT, "\t\t");
    _builder.append("\",\tIdentifiersManager.getIdentifier(target).getCompleteUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getOperationVariable(Identified target, String ID_MSG){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OPERATION, "\t\t");
    _builder.append("\", ID_MSG);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getCollElementsVariables(Identified target, Method method, String ID_MSG) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String fieldAdd = getAddAttribute(target, method);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (fieldAdd.compareTo(\"\") != 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Object collectionAttribute;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("collectionAttribute = target.getClass().getField(fieldAdd).get(target);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (collectionAttribute instanceof AbstractCollection");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("&& !((AbstractCollection) collectionAttribute).isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("((AbstractCollection) collectionAttribute).stream().forEach(object -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.MODCOLLATTRIBUTE, "\t\t\t\t\t\t");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("IdentifiersManager.getIdentifier(object).getCompleteUUID());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getInputVariables( Object[] args, Identified target, String ID_MSG){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Object arg : args) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (arg != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (arg instanceof AbstractCollection) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("((AbstractCollection) arg).stream().forEach(element -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String completeID = IdentifiersManager.getIdentifier(element).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target,ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.INPUT, "\t\t\t\t\t\t");
    _builder.append("\",IdentifiersManager.getIdentifier(element).getCompleteUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.INPUTVALUE, "\t\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID,ID_MSG,completeID, \"value\",element.toString());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.INPUTTYPE, "\t\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID,ID_MSG,completeID, \"type\",element.getClass().getTypeName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String completeID = IdentifiersManager.getIdentifier(arg).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.INPUT, "\t\t\t\t\t");
    _builder.append("\",IdentifiersManager.getIdentifier(arg).getCompleteUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.INPUTVALUE, "\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID, ID_MSG, completeID, \"value\",arg.toString());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("provenanceValueType(target,\"");
    _builder.append(UML2PROV_VARIABLES.INPUTTYPE, "\t\t\t\t\t");
    _builder.append("\",  EXECUTION_ID,ID_MSG,completeID, \"type\",arg.getClass().getTypeName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void provenanceBeforeExecution(Identified target, Method method, Object[] args, String ID_MSG, String starter, Boolean inSequence, Boolean inClass, Boolean inState) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(inSequence) getStarterVariable(target, ID_MSG, starter);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(inClass) getCollElementsVariables(target, method, ID_MSG);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void provenanceAfterExecution(Identified target, Method method, Object []args, String ID_MSG, Object rtn, String sourceID, Boolean  inSequence, Boolean  inClass,Boolean   inState) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BGMEvent endMethod = new BGMEvent(target, EXECUTION_ID, target.getClass().getSimpleName(), ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("UUID targetID = IdentifiersManager.getIdentifier(target);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(inClass) getAttributesVariable(target, method, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (inSequence && !previousMethod) {\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.getNewRequestVariable(target, ID_MSG, startersArray.get(level));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.getReplyMessageVariable(target, ID_MSG, method, returnsArray.get(level));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("exec.execute(() ->{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSourceVariable(target, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getOperationVariable(target, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(!(!inSequence && !inClass && inState)) getInputVariables(args, target, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(inState || inClass) this.getTargetVariables( target,  method,  targetID,  sourceID, ID_MSG, endMethod);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(inSequence) getLifelineVariable(target, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(inState) getObjectVariables(target, targetID, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// ------------------ output variable");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (rtn != null){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("getMessageReplyVariable(target, ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("getOutputVariable(target,rtn,ID_MSG);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {bgmm.fireEvent(\"operationEnd\",endMethod);} catch (InvocationTargetException e) {e.printStackTrace();}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getTargetVariables(Identified target, Method method, UUID targetID, String sourceID, String ID_MSG, BGMEvent endMethod){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ target variable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(changeState(target, method) && targetID.getCompleteUUID().compareTo(sourceID)==0){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.POSTOBJECT, "\t\t\t");
    _builder.append("\", IdentifiersManager.incrementIdentifier(target));\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("String newState = getTargetState(target, method);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(!newState.isEmpty()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.SOURCESTATE, "\t\t\t\t");
    _builder.append("\", getCurrentState(target));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.TARGETSTATE, "\t\t\t\t");
    _builder.append("\", newState);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("StateManager.newState(target, newState);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("endMethod.setState(newState);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.POSTOBJECT, "\t\t\t");
    _builder.append("\", targetID.getCompleteUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ target variable");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getNewRequestVariable(Identified target, String ID_MSG,  List<SimpleEntry<String, String>> starterLevel){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ newRequest variable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < starterLevel.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.NESTEDREQUEST, "\t\t\t");
    _builder.append("\", starterLevel.get(i).getValue());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ newRequest variable");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getReplyMessageVariable(Identified target, String ID_MSG, Method method,  List<SimpleEntry<String, String>> returnLevel){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ replyMessage variable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < returnLevel.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(isInformedWithOutput(target, method, returnLevel.get(i).getKey().split(\"|\")[0]) || isInformedWithNoOutput(target,method, returnLevel.get(i).getKey().split(\"|\")[0])){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.NESTEDRESPONSE, "\t\t\t\t");
    _builder.append("\", returnLevel.get(i).getValue());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ replyMessage variable");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getLifelineVariable(Identified target, String ID_MSG){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ lifeline variable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final String lifelevelId = (level-1 > 0 && objIdArray.size()> level-1 ) ? objIdArray.get(level-1) : \"TheBigBang\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.SENDEROBJECT, "\t\t");
    _builder.append("\", lifelevelId);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// ------------------ lifeline variable");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getObjectVariables(Identified target, UUID targetID, String ID_MSG){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ object variable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OBJECT, "\t\t");
    _builder.append("\", targetID.getUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OBJECTSM, "\t\t");
    _builder.append("\", targetID.getUUID()+\"_0\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// ------------------ object variable");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getMessageReplyVariable(Identified target, String ID_MSG){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ------------------ MessageReply variable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.NESTEDRESPONSE, "\t\t");
    _builder.append("\", IdentifiersManager.randomUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// ------------------ MessageReply variable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getAttributesVariable(Identified target,Method method, String ID_MSG){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//gestion de atributos tras la ejecucion del metodo");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Arrays.asList(target.getClass().getDeclaredFields()).stream()");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".filter(field -> propertiesMemoryAttributes.get(target.getClass().getSimpleName()+\".attributes\").contains(field.getName())) //only those fields included in the diagram");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".forEach(field -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("field.setAccessible(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String fieldStereotype = \"none\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String fieldUUID;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Object fieldTarget = field.get(target);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("fieldUUID = (fieldTarget!=null)?IdentifiersManager.getIdentifier(fieldTarget).getCompleteUUID():IdentifiersManager.randomUUID();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String fieldValue = (fieldTarget != null) ? field.get(target).toString() : \"Null\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String fieldType = (fieldTarget != null) ? field.getType().getName() : \"Null\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (getPropertyAttribute(target, method).compareTo(\"\") != 0 && getPropertyAttribute(target, method).compareTo(field.getName()) == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("fieldStereotype = \"property\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.SOURCEATTRIBUTE, "\t\t\t\t\t\t\t\t");
    _builder.append("\", fieldUUID);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// new and old column /also attributes");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else if (getAddAttribute(target, method).compareTo(\"\") != 0 && getAddAttribute(target, method).compareTo(field.getName()) == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("fieldStereotype = \"add\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.MODCOLLATTRIBUTE, "\t\t\t\t\t\t\t\t");
    _builder.append("\",IdentifiersManager.newUUID(fieldTarget).getCompleteUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// modify attribute");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else if (getModifyAttribute(target, method).compareTo(\"\") != 0 && getModifyAttribute(target, method).compareTo(field.getName()) == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("fieldStereotype = \"modify\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("//provenance(EXECUTION_ID, target, ID_MSG, \"oldAttr\",fieldUUID);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("String fieldUUID2= IdentifiersManager.incrementIdentifier(field.get(target));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("fieldValue = (fieldTarget != null) ? field.get(target).toString() : \"Null\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("fieldType = (fieldTarget != null) ? field.getType().getName() : \"Null\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.MODIFIEDATTRIBUTE, "\t\t\t\t\t\t\t\t");
    _builder.append("\",fieldUUID2);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.MODIFIEDATTRIBUTEVALUE, "\t\t\t\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID,ID_MSG, fieldUUID2, \"value\", fieldValue);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.MODIFIEDATTRIBUTETYPE, "\t\t\t\t\t\t\t\t");
    _builder.append("\",EXECUTION_ID, ID_MSG,fieldUUID2, \"type\", fieldType);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.MODIFIEDATTRIBUTENAME, "\t\t\t\t\t\t\t\t");
    _builder.append("\",EXECUTION_ID, ID_MSG,fieldUUID2, \"attName\",field.getName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// remove elements from a collection");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else if (getRemoveAttribute(target, method).compareTo(\"\") != 0 && getRemoveAttribute(target, method).compareTo(field.getName()) == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("fieldStereotype = \"remove\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.MODCOLLATTRIBUTE, "\t\t\t\t\t\t\t\t");
    _builder.append("\",IdentifiersManager.newUUID(fieldTarget).getCompleteUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("Object collectionAttribute = target.getClass().getField(getRemoveAttribute(target, method)).get(target);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("if (collectionAttribute instanceof AbstractCollection) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("((AbstractCollection) collectionAttribute).stream().forEach(s -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.COLLELEMENT, "\t\t\t\t\t\t\t\t\t\t");
    _builder.append("\", fieldUUID);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// get identifier withoutmodifications");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("if (changeState(target, method)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.ATTRIBUTE, "\t\t\t\t\t\t\t\t\t");
    _builder.append("\", fieldUUID);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.ATTRIBUTEVALUE, "\t\t\t\t\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID,ID_MSG, fieldUUID, \"value\", fieldValue);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.ATTRIBUTETYPE, "\t\t\t\t\t\t\t\t\t");
    _builder.append("\",EXECUTION_ID,ID_MSG, fieldUUID, \"type\", fieldType);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.ATTRIBUTENAME, "\t\t\t\t\t\t\t\t\t");
    _builder.append("\",EXECUTION_ID,ID_MSG, fieldUUID, \"attName\",field.getName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IllegalArgumentException | SecurityException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void getOutputVariable(Identified target,Object rtn, String ID_MSG) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(rtn instanceof AbstractCollection){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (((AbstractCollection<Object>) rtn).isEmpty()){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String rtnUUID = IdentifiersManager.getIdentifier(rtn).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OUTPUT, "\t\t\t\t");
    _builder.append("\",rtnUUID);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.OUTPUTVALUE, "\t\t\t\t");
    _builder.append("\", EXECUTION_ID, ID_MSG,rtnUUID, \"value\", \"Empty\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.OUTPUTTYPE, "\t\t\t\t");
    _builder.append("\",EXECUTION_ID, ID_MSG,rtnUUID, \"type\", rtn.getClass().getTypeName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("((AbstractCollection<Object>) rtn).stream().forEach(object -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String rtnUUID = IdentifiersManager.getIdentifier(object).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OUTPUT, "\t\t\t\t\t");
    _builder.append("\",rtnUUID);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.OUTPUTVALUE, "\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID, ID_MSG,rtnUUID, \"value\", object.toString());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("provenanceValueType(target,\"");
    _builder.append(UML2PROV_VARIABLES.OUTPUTTYPE, "\t\t\t\t\t");
    _builder.append("\", EXECUTION_ID, ID_MSG,rtnUUID, \"type\", object.getClass().getTypeName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String rtnUUID = IdentifiersManager.getIdentifier(rtn).getCompleteUUID();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("provenance(EXECUTION_ID, target, ID_MSG, \"");
    _builder.append(UML2PROV_VARIABLES.OUTPUT, "\t\t\t");
    _builder.append("\",IdentifiersManager.getIdentifier(rtn).getCompleteUUID());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.OUTPUTVALUE, "\t\t\t");
    _builder.append("\",EXECUTION_ID, ID_MSG,rtnUUID, \"value\", rtn.toString());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("provenanceValueType(target, \"");
    _builder.append(UML2PROV_VARIABLES.OUTPUTTYPE, "\t\t\t");
    _builder.append("\",EXECUTION_ID, ID_MSG,rtnUUID, \"type\", rtn.getClass().getTypeName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String beforeManagement(Identified target, String method_name, String id_msg){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (previousMethod) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("level++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("previousMethod = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (returnsArray.size() <= level) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("returnsArrayTimes.add(level, new ArrayList<SimpleEntry<String, Long>>());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("returnsArray.add(level, new ArrayList<SimpleEntry<String, String>>());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("startersArray.add(level, new ArrayList<SimpleEntry<String, String>>());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(objIdArray.size()>level && level>0)objIdArray.add(level,  IdentifiersManager.getIdentifier(target).getUUID());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ID of the entity which triggers this execution");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String starter = IdentifiersManager.randomUUID();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Store this identifier in methodStarter");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SimpleEntry<String, String> methodStarter = new SimpleEntry<String, String>(target.getClass().getSimpleName() + \".\" + method_name + \"@\" + id_msg, starter);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("startersArray.get(level).add(methodStarter);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//System.out.println(\"before [\"+method_name+\"] level \"+level);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return starter;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void afterManagement(Identified target, String method_name, String id_msg, String replyMessageID){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//System.out.println(\"after [\"+method_name+\"] level \"+level);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/** Starting the end-block of managing hierarchical methods */");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!previousMethod){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("returnsArrayTimes.get(level).clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("returnsArray.get(level).clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("startersArray.get(level).clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("objIdArray.clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(level!=0) level--;");
    _builder.newLine();
    _builder.append("//\t\t\treturnsArrayTimes.add(level,null);");
    _builder.newLine();
    _builder.append("//\t\t\treturnsArray.add(level,null);");
    _builder.newLine();
    _builder.append("//\t\t\tstartersArray.add(level,null);");
    _builder.newLine();
    _builder.append("//\t\t\tobjIdArray.clear();");
    _builder.newLine();
    _builder.append("//\t\t\tif(level!=0) level--;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("previousMethod = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// keeping track of the return objects");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SimpleEntry<String, String> methodReturn = new SimpleEntry<String, String>(\ttarget.getClass().getSimpleName() + \".\" + method_name + \"@\" + id_msg, replyMessageID);\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("returnsArray.get(level).add(methodReturn);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/** Ending of the end-block of managing hierarchical methods */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void provenance(String ID_EXECUTION, final Identified target, String ID_EXECUTION_METHOD, String variableName,String value){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BGMEvent e = new BGMEvent(target, ID_EXECUTION, target.getClass().getSimpleName(), ID_EXECUTION_METHOD, variableName, value);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bgmm.fireEvent(\"newBinding\", e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (InvocationTargetException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void provenanceValueType(final Identified target, String variableName, String ID_EXECUTION, String ID_EXECUTION_METHOD, String identifier, String type, String value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//BGMEvent e = new BGMEvent(target, ID_EXECUTION, value, identifier, type);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BGMEvent e = new BGMEvent(target, ID_EXECUTION, target.getClass().getSimpleName(), ID_EXECUTION_METHOD, variableName, value);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bgmm.fireEvent(\"newValueBinding\", e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (InvocationTargetException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getCurrentState(Object o){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String currentState= StateManager.getState(o);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (currentState==null)?\"\":currentState.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getInitialState(Identified target) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName()+\".sourceState\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StateManager.newState(target, change);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getTargetState(Identified target, Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String currentState= StateManager.getState(target);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String property = target.getClass().getSimpleName()+ \".\" + m.getName() + \".\"+currentState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(property.trim());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void setCurrentState(Object o, String state){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StateManager.newState(o, state);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Boolean isRelevant(Identified target, Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName() + \".\" +m.getName() + \".relevant\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (change != null && change.trim().compareTo(\"true\") == 0) ? true : false; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Boolean changeState(Identified target, Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName() + \".\" + m.getName() + \".changeState\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean response = (change != null && change.trim().compareTo(\"true\") == 0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return response;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//return the name of the attribute collection used");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getGetCollectionAttribute(Identified target,Method m) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName()+ \".\" + m.getName() + \".search\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getPropertyAttribute(Identified target,Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName()+ \".\" + m.getName() + \".property\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getSetAttribute(Identified target,Method m) {");
    _builder.newLine();
    _builder.append("//\t\ttry {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName()+ \".\" + m.getName() + \".set\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getCommandAttribute(Identified target,Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName()+ \".\" + m.getName() + \".command\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getGetAttribute(Identified target,Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName()+ \".\" + m.getName() + \".get\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getAddAttribute(Identified target,Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName() + \".\" + m.getName() + \".add\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getModifyAttribute(Identified target,Method m) {");
    _builder.newLine();
    _builder.append("//\t\ttry {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName()+ \".\" + m.getName() + \".modify\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getRemoveAttribute(Identified target, Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String change = propertiesMemory.get(target.getClass().getSimpleName() + \".\" + m.getName() + \".remove\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (change==null)?\"\":change.trim();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean isInformedWithNoOutput(Identified target, Method m, String key) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String informedMethods = propertiesMemory.get(target.getClass().getSimpleName() + \".\" + m.getName() + \".informedBy\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(informedMethods!=null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return informedMethods.contains(key);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean isInformedWithOutput(Identified target, Method m, String key) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String informedMethods = propertiesMemory.get(target.getClass().getSimpleName() + \".\" + m.getName() + \".informedByWithOutput\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(informedMethods!=null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return informedMethods.contains(key);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
