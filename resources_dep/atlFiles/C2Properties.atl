-- @path PROP=/ATLProject/metamodels/properties.ecore
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML

module C2Properties;
create OUT: PROP from IN: UML;

helper def: packagesTranslated : Sequence(String) = Sequence{'src'};


--- Evaluates whether the context has the given stereotype or not.
helper context UML!Element def: hasStereotype(stereotype : String) : Boolean =
	self.getAppliedStereotypes() -> collect(st | st.name) -> includes(stereotype);

helper context UML!Element def: getTagValue(stereotype: String, tagName : String) : String =
	if (self.hasStereotype(stereotype))  then
       self.getValue(self.getAppliedStereotypes().first(), 'item') --self.getValue(self.getAppliedStereotype(stereotype),tagName)
    else
       'noTagValue'
    endif;

--check if there are properties repeited
helper def: allProperties: Map(String, String) = Map{};

helper def: parameterPosition(paramName : String): Integer = 
	if (self.ownedParameter->notEmpty()) then
		if (self.ownedParameter->includes(paramName)) then
			self.ownedParameter->indexOf(paramName)+1
		else 
			0
		endif
	else
		0
	endif;


--foreach one of the events select its transition and store it in the global variable eventTransitionMap
rule selectTransitions() {
	do {
		for (event in UML!Event.allInstances()) {
			for (transition in UML!Transition.allInstances() ) {
				for (transEvent in transition.trigger) {
					if (event = transEvent.event) {
						thisModule.eventTransitonMap.put(event, transition);
					}
				}
			}
		}
	}
}

helper def: belongsToTheSameLifeline(ex: UML!ExecutionSpecification ,msg: UML!MessageOccurrenceSpecification): Boolean = 
	ex.covered = msg.covered;

helper def: documentTop : PROP!Document = OclUndefined;

helper def: documentRoot : PROP!PropertiesDocument = OclUndefined;

helper def: documentRootAspect : PROP!PropertiesDocument = OclUndefined;


rule genProperty(name: String, value: PROV!Activity, doc: PROP!PropertiesDocument){
	to
		p:PROP!Property(
			name <- name,
			value <- value
		)
	do {
		doc.properties <- p;
	}
}


rule addProperty(name: String, value: String, doc: PROP!PropertiesDocument){	
	do {
		if (thisModule.allProperties.get(name).oclIsUndefined()) {
					thisModule.allProperties.put(name,value);
					thisModule.genProperty(name, value, doc);
		}
	}
}



entrypoint rule DocumentRoot() {
	to
		docTop: PROP!Document,
		docR2: PROP!PropertiesDocument(name <- 'provenanceExtractor'),
		docR: PROP!PropertiesDocument( name <- 'out_properties.xml')

	do {
		thisModule.documentRootAspect <- docR2;
		thisModule.documentRoot <- docR;
		
		docTop.propertiesDocument<-docR2;
		docTop.propertiesDocument<-docR;

		
		for (ms in UML!ExecutionSpecification.allInstances()) {
			thisModule.hierachicalMessages(ms, thisModule.documentRoot );
			--thisModule.quotationParameters(ms, thisModule.documentRoot);
		}
	}
}


-- ms: UML!ExecutionSpecification   This is the execution of the Message
-- os: UML!OccurrenceSpecification
rule hierachicalMessages(ms: UML!ExecutionSpecification,  doc: PROP!PropertiesDocument ){
	using {
		outputFrom: String = '';
		informedBy: String = '';
		informedByWithOutput: String ='';
		getOcurrence: Boolean = false;
	}
	
	do{
		for (os in UML!OccurrenceSpecification.allInstances()) {
	
					if(ms.finish = os){
						getOcurrence<- false;
					}
					
					if(getOcurrence){
						
						if(os.oclIsTypeOf(UML!OccurrenceSpecification)){
								if(thisModule.belongsToTheSameLifeline(ms, os) and os.message.messageSort.toString()='asynchCall'){
									informedBy <- informedBy + '_'+os.message.signature.class.name+'.'+os.message.signature.name;
								}
								if(thisModule.belongsToTheSameLifeline(ms, os) and  os.message.messageSort.toString()='synchCall'){

									informedByWithOutput <- informedByWithOutput 
															+ '_'+os.message.signature.name+'.'
															+os.message.signature.name;
								}
						}
					}
					if(ms.start = os){
						getOcurrence<- true;
					}
		}
		if(informedBy.size()<>0){
			thisModule.genProperty(ms.start.message.signature.class.name+'.'+ms.start.message.signature.name+'.informedBy', informedBy, doc);
		}
		if(informedByWithOutput.size()<>0){
			thisModule.genProperty(ms.start.message.signature.class.name+'.'+ms.start.message.signature.name+'.informedByWithOutput', informedByWithOutput, doc);
		}
	}
}


rule seqOperations2document {
	from
		ms: UML!ExecutionSpecification (ms.start.oclIsTypeOf(UML!MessageOccurrenceSpecification))
	using {
		operation:String= ms.start.message.signature.name;
		class:String = ms.start.message.signature.class.name;
	}
	do{
		thisModule.addProperty(class+'.'+operation+'.seqD','true', thisModule.documentRoot);	
	}
}

rule seqOperationsNew2document {
	from
		ms: UML!Message (ms.messageSort.toString() = 'createMessage') 
	using {
		operation:String= ms.signature.name;
		class:String = ms.signature.class.name;
	}
	do{
		thisModule.addProperty(class+'.'+operation+'.seqD','true', thisModule.documentRoot);	
	}
}


rule stateOperations2document {
	from
		event: UML!Event
	using {
		operation:String= event.operation.name;
		class:String = event.operation.class.name;
	}
	do{
		thisModule.addProperty(class+'.'+operation+'.stD','true', thisModule.documentRoot);	
	}
}


rule class2property{
	from 
		cl: UML!Class
	
	using{
		packages:Sequence(String)=cl.qualifiedName.split('::').subSequence(3, cl.qualifiedName.split('::')->size()-1);	
		packagesString:String='';
		attributes:String='';
	}
	
		do{		
			
			if(not cl.package.oclIsUndefined()){			
				for (attribute in cl.ownedAttribute) {				
					attributes<- attribute.name +'|'+  attributes ;
				}
				thisModule.addProperty(cl.name+'.attributes', attributes , thisModule.documentRoot);	
			}
			
			if(not cl.classifierBehavior.oclIsUndefined()){
				for(region in cl.classifierBehavior.region){
					for(trans in region.transition){
						
						    --if the transition is initial I add the sourceState property to the class
							if (trans.source.oclIsTypeOf(UML!Pseudostate)) {
								if(trans.source.kind=#initial and trans.target.oclIsTypeOf(UML!State)){
									thisModule.addProperty(cl.name+'.sourceState', trans.target.name, thisModule.documentRoot);		
								}
							}
							--if the transition is not initial I add the property <class>.<method>.<sourceState>=<targetState>
							if(trans.source.oclIsTypeOf(UML!State) and trans.target.oclIsTypeOf(UML!FinalState)){
								thisModule.addProperty(cl.name+'.'+
													   trans.trigger->first().event.operation.name+'.'+
													   trans.source.name, 'final', thisModule.documentRoot);			
							}
							if(trans.source.oclIsTypeOf(UML!State) and trans.target.oclIsTypeOf(UML!State)){
								thisModule.addProperty(cl.name+'.'+
													   trans.trigger->first().event.operation.name+'.'+
													   trans.source.name, trans.target.name, thisModule.documentRoot);			
							}	
					}
				}
			}
		}

}





---rule Class2property {
---	from
---		pk: UML!Package --(thisModule.packagesTranslated->includes(pk.name))

---	using{
---		packages:String=pk.name;
---	}

---		do{
---			--packagedElement
---				for(pkAux in pk.nestedPackage){
---					packages.println();
---					packages<-pkAux.name +'.'+packages;
---				}
			
---				for (cl in pk.ownedElement) {
---					if(cl.oclIsKindOf(UML!Class)){
---						thisModule.genProperty('CLASS',  packages+'.'+cl.name, thisModule.documentRootAspect);
---						for(op in cl.ownedOperation){
---							thisModule.genProperty('OPERATION',  pk.name+'.'+cl.name+'.'+op.name, thisModule.documentRootAspect);
---						}
---					}
---				}
---		}
---}


rule Operation2Document {
	from
		cl: UML!Operation
		
	using {
		type:String ='';
		name:String = '';
		value:String ='';
		methods:String = '';
	}

	do {
		thisModule.addProperty(cl.class.name+'.'+cl.name+'.classD', 'true' , thisModule.documentRoot);	
		
		--thisModule.addProperty(cl.class.name+'.'+cl.name+'.relevant', 'true', thisModule.documentRoot);

		--add block --
		if(cl.hasStereotype('add')) {
			name<- cl.class.name+'.'+cl.name+'.add';
			value<- cl.getTagValue('add','item');
			type<-'add';
			thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
			
		---}else if (cl.name.startsWith('add')) {
		---	name<- cl.class.name+'.'+cl.name+'.add';
		---	value<- cl.name.regexReplaceAll('^add','').toLower();
		---	thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
			
		}
		-- remove block--
		else if (cl.hasStereotype('remove')) {
			name<- cl.class.name+'.'+cl.name+'.remove';
			value<-  cl.getTagValue('remove','item');
			thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
			
		---}else if (cl.name.startsWith('remove')) {
		---	name<- cl.class.name+'.'+cl.name+'.remove';
		---	value<- cl.name.regexReplaceAll('^remove','').toLower();
		---				thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
			
		---}else if (cl.name.startsWith('drop')) {
		---	name<- cl.class.name+'.'+cl.name+'.remove';
		---	value<- cl.name.regexReplaceAll('^drop','').toLower();
		---				thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
			
		}
		
		--- modify --
		else if (cl.hasStereotype('modify')) {
			name<- cl.class.name+'.'+cl.name+'.modify';
			value<-  cl.getTagValue('modify','item');
			thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
		}
		
		-- setter block --
		else if (cl.hasStereotype('set')) {
			name<- cl.class.name+'.'+cl.name+'.set';
			value<- cl.getTagValue('set','item');
			thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
			
			
		---}else if (cl.name.startsWith('set')) {
		---	name<- cl.class.name+'.'+cl.name+'.set';
		---	value<- cl.name.regexReplaceAll('^set','').toLower();
		---	thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
			
		}
		else if (cl.hasStereotype('command')) {
			name<- cl.class.name+'.'+cl.name+'.command';
			value<- 'true';
			thisModule.addProperty(cl.class.name+'.'+cl.name+'.changeState','true', thisModule.documentRoot);
		}
		
		--- getter block
		else if (cl.hasStereotype('search')) {
			name<- cl.class.name+'.'+cl.name+'.search';
			value<- cl.getTagValue('search','item');
			
		}
		else if (cl.hasStereotype('get')) {
			name<- cl.class.name+'.'+cl.name+'.get';
			value<- cl.getTagValue('get','item');
			
		---}else if (cl.name.startsWith('get')) {
		---	name<- cl.class.name+'.'+cl.name+'.get';
		---	value<- cl.name.regexReplaceAll('^get','').toLower();
		}
		
		--- property block
		else if (cl.hasStereotype('property')) {
			name<- cl.class.name+'.'+cl.name+'.property';
			value<- cl.getTagValue('property','item');
			
		}				
		
		else if (cl.hasStereotype('predicate')) {
			name<- cl.class.name+'.'+cl.name+'.predicate';
			value<- cl.getTagValue('predicate','item');
			
		}	
		
		if(name.size()<>0 and value<>0){	
			thisModule.addProperty(name, value, thisModule.documentRoot);
		}
		
	}
		
}



rule relevantOperations2Document {
	from
		trans: UML!Transition (not trans.trigger.oclIsUndefined())
	do{
		if(trans.target.oclIsTypeOf(UML!State)){	
				for (transEvent in trans.trigger) {
					thisModule.addProperty(transEvent.event.operation.class.name+'.'+transEvent.event.operation.name+'.changeState','true', thisModule.documentRoot);
				}
		}
	}
}


