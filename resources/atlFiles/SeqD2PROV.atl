-- @path PROV=../../metamodels/prov.ecore
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML


module SeqD2PROV;
create OUT: PROV from IN: UML;

--- Evaluates whether the context has the given stereotype or not.
helper context UML!Element def: hasStereotype(stereotype: String): Boolean =
	self.getAppliedStereotypes() -> collect(st | st.name) -> includes(stereotype);

--Example
--------------------------------------------------------------------------------------------------
---entity(var:input0, [prov:value = 'var:input0value'])      
---used(var:message, var:input0, -, [prov:role='u2p:seminar'])
	
---activity(var:message, [prov:type = 'u2p:includeAssociatedSeminar', 
						 ---tmpl:startTime = 'var:messageStartTime',
--- tmpl:endTime='var:messageEndTime' ])
---agent(var:lifeline, [prov:type='u2p:Seminar'])
---wasAssociatedWith(var:message, var:lifeline, - , [])
--------------------------------------------------------------------------------------------------

helper def: documentRoot: PROV!DocumentRoot =OclUndefined;
helper def: interaction: UML!Interaction =OclUndefined;
helper def: orderedOcurrences: Sequence(UML!OccurrenceSpecification) = 
	UML!OccurrenceSpecification.allInstances()->collect(e | e);
--helper def: orderedOcurrences: OrderedSet (UML!OccurrenceSpecification) = 
--	UML!OccurrenceSpecification.allInstances()->collect(e | e)->asOrderedSet();

helper def : thereIsReply(msg: UML!Message) : Boolean = 
	UML!Message.allInstances()->exists(message | message.signature.name=msg.signature.name and message.messageSort.toString()='reply');

helper def: thereIsOutReturnParams(msg: UML!Message): Boolean = 
	msg.signature.ownedParameter->exists(param | param.direction.toString() = 'return' or param.direction.toString() = 'out');

helper def: thereIsInParams(msg: UML!Message): Boolean = 
	msg.signature.ownedParameter->exists(param | param.direction.toString() = 'in');

helper def: belongsToTheSameLifeline(ex: UML!ExecutionSpecification ,msg: UML!MessageOccurrenceSpecification): Boolean = 
	ex.covered = msg.covered;

--- Evaluates whether the context has the given stereotype or not.
helper def: hasStereotype(stereotype: String): Boolean =
	self.getAppliedStereotypes() -> collect(st | st.name) -> includes(stereotype);

rule translateReply(sendMessage: UML!Message, ac: PROV!Activity, doc:PROV!Document) {
	do {
		for (msg in sendMessage.interaction.message){
			if(msg.messageSort = #reply){
---				if(msg.signature.name = sendMessage.signature.name){
				if(msg.name = sendMessage.name){
					thisModule.replyMessage(sendMessage, msg, ac, doc);
				}
			}
		}
	}
}


--Relationship: hadMember
--	entTOP - PROV!Entity which is a collection of Entities
--	ent - PROV!Entity which a member of entTOP Entity
--	doc - PROV!Document where hadMember relationship is added
rule genWDF(ent: String, entD: String, doc: PROV!Document){
	to
		e: PROV!IDRef (ref <- ent),
		ed: PROV!IDRef(ref<- entD),
		wdf: PROV!Derivation(usedEntity <- e,generatedEntity<- ed)
	do {
		doc.wasDerivedFrom <- wdf;
		thisModule.documentRoot.document<- doc;
	}
}
rule genWDF_message(ent: String, entD: String, doc: PROV!Document){
	to
		e: PROV!IDRef (ref <- ent),
		ed: PROV!IDRef(ref<- entD),
		wdf: PROV!Derivation(usedEntity <- e,generatedEntity<- ed)
	do {
		doc.wasDerivedFrom <- wdf;
		thisModule.documentRoot.document<- doc;
	}
}

rule genInformedBy(ac1: String, ac2: String, doc: PROV!Document){
	to
		a1: PROV!IDRef (ref <- ac1),
		a2: PROV!IDRef(ref<- ac2),
		wib: PROV!Communication(
			informed<-a1,
			informant<-a2)
	do {
		doc.wasInformedBy <- wib;
		thisModule.documentRoot.document<- doc;
	}
}


rule genWGB(ent: String, act: String, doc: PROV!Document){
	to
		e: PROV!IDRef (
			ref <- ent
		),
		a: PROV!IDRef (
			ref <- act
		),
		wgb: PROV!Generation (
			entity <- e,
			activity <- a
		)
	do {
		doc.wasGeneratedBy <- wgb;
	}
}

rule genWGBwithRole(ent: String, role: String, act: PROV!Activity, doc: PROV!Document){
	to
		e: PROV!IDRef (
			ref <- ent
		),
		a: PROV!IDRef (
			ref <- act.id
		),
		wgb: PROV!Generation (
			entity <- e,
			activity <- a
		)
	do {
		doc.wasGeneratedBy <- wgb;
	}
}

--Element: Entity with type
rule genEntityWithTypeAndValue(p: String,t: String, v: String, doc: PROV!Document){
	to
		en: PROV!Entity (
			id <- p,
			type <- t
		)
	do{
		if(v.size()<>0){
			en.value <-v;
		}
		doc.entity<-en;
	}
}
rule genActivity(p: String,  t: String, doc: PROV!Document){
	to
		ac: PROV!Activity (
			id <- p,
			type <- t
		)
	do{
		doc.activity<-ac;
	}
}



rule genOutputParameter(entId: String, act: PROV!Activity, valueP: String,  doc:PROV!Document){
	to
		a: PROV!IDRef (
			ref <- act.id
		),
		e: PROV!IDRef (
			ref <- entId
		),
		g: PROV!Generation (
			activity <- a,
			entity <- e
		),
		ent: PROV!Entity (
			id <- entId,
			value <- valueP
		)
	do {
		doc.entity<- ent;
		doc.wasGeneratedBy <- g;
		thisModule.documentRoot.document<- doc;
	}
}

rule genU_message(en:String, ac:PROV!Activity, doc:PROV!Document){
	to
		e: PROV!IDRef (ref <- en),
		a: PROV!IDRef(ref<- ac.id),
		u: PROV!Usage(entity <- e,activity<- a)	
	do {
		doc.used<- u;
	}
}


rule associateInputOutput(outMsg: String , sendMessage: UML!Message, doc:PROV!Document){
	using {
		i: Integer = 0;
	}
	
	do {
			for (p in sendMessage.argument) {
				thisModule.genWDF('input' + i, outMsg, doc);
				i<-i + 1;
			}
			thisModule.documentRoot.document<- doc;
	}
}


rule setAgentType(ag: PROV!Agent, msg: UML!Message){
	do {
		for (lifeline in msg.interaction.lifeline) {
			for (cover in lifeline.coveredBy) {
				if (cover=msg.sendEvent) {
					ag.type<-lifeline.name;
				}
			}
		}
	}
}


rule setDocumentID(msg: UML!Message, doc: PROV!Document){
	do {
		doc.id<- msg.start.message.signature.owner.name+'_'+msg.start.message.signature.name;
	}
}

--Element: Entity with type
rule genEntity(p: String, doc: PROV!Document){
	to
		en: PROV!Entity (
			id <- p
		)
	do{
		doc.entity<-en;
	}
}

rule replyMessage(sendMessage: UML!Message, replyMessage: UML!Message,  ac: PROV!Activity, doc: PROV!Document){
	using {
		i: Integer = 0;
	}
	do {
			for (p in replyMessage.argument) {
				thisModule.genOutputParameter('output' + i, ac, 'output' + i + 'value', doc);
				thisModule.associateInputOutput('output' + i,sendMessage,doc);
				i<-i + 1;
			}

	}
}

rule hadMember(entTop: String, ent: String, doc: PROV!Document){
	to
		eTop: PROV!IDRef (
			ref <- entTop
		),
		e: PROV!IDRef (
			ref <- ent
		),
		hm: PROV!Membership (
			collection <- eTop,
			entity <- e
		)
	do {
		doc.hadMember <- hm;
	}
}


entrypoint rule DocumentRoot(){
	to
		docR: PROV!DocumentRoot
	do {
		thisModule.documentRoot <- docR;
	}
}

rule newInputEntity(doc:PROV!Document){
	to
		inputEn: PROV!Entity (
			id <- 'var:input',
			type <- 'var:inputType',
			value <- 'var:inputValue'
		)
	do{
		doc.entity<-inputEn;
	}
}


rule OperationFactory2Document {
	from
		msg: UML!Message (msg.signature.hasStereotype('Create') or msg.signature.class.name = msg.signature.name)
	using {
		operation: UML!Operation = msg.signature;
		existIn: Boolean = operation.ownedParameter->exists(ip | ip.direction.toString() = 'in');
		hasAttr: Boolean = operation.class.ownedAttribute->size() > 1;
	}
	to
		obj: PROV!Agent(
			id<- 'var:lifeline'
		),
		objRef: PROV!IDRef(
			ref<-obj.id
		),
		targetEn: PROV!Entity (
			id <- 'var:target',
			type <- 'exe:' + operation.class.name,
			type<- 'u2p:Object'
		),
		star: PROV!Entity(
			id<- 'var:starter',
			type<-'u2p:RequestMessage'
		),
		starRef: PROV!IDRef(
			ref<-star.id	
		),
		targetID: PROV!IDRef (
			ref <- targetEn.id
		),
		
		operationAct: PROV!Activity (
			id <- 'var:operation'
		),
		activityID: PROV!IDRef (
			ref <- operationAct.id
		),
		activityID2: PROV!IDRef (
			ref <- operationAct.id
		),
		activityID3: PROV!IDRef (
			ref <- operationAct.id
		),
		wsb: PROV!Start(
			 activity<-activityID2,
			 starter <- starRef
		),
		wgb: PROV!Generation (
			entity <- targetID,
			activity <- activityID3
		),	
		waw: PROV!Association(
			activity <- activityID,
			agent <-objRef
		),
		
		doc: PROV!Document (
			id <- operation.class.name + '_new',
			activity <- operationAct,
			entity <- targetEn, 
			entity<- star,
			wasGeneratedBy <- wgb,
			wasStartedBy <- wsb,
			wasAssociatedWith <- waw,
			agent <- obj
		)
	do {
			thisModule.genEntityWithTypeAndValue('var:newRequest', 'u2p:RequestMessage','', doc);
			thisModule.genWGBwithRole('var:newRequest', 'u2p:RequestMessage', operationAct,doc);
		
			--generate all the input parameters entities
			if(existIn){
				thisModule.newInputEntity(doc);
				--thisModule.genEntity('var:input', doc);
				thisModule.hadMember('var:starter', 'var:input', doc);

			}
			thisModule.documentRoot.document <- doc;
		}
	}



rule executionSpecification2document {
	from
		ms: UML!ExecutionSpecification (ms.start.oclIsTypeOf(UML!MessageOccurrenceSpecification))
	using {
		sendMessage: UML!Message = ms.start.message;
		outParam: Boolean = false;
		inParam: Boolean = false;
		getOcurrence: Boolean = false;

		isInformed: Boolean= false;
		isInformedWithOutput:Boolean = false;
	}
	to
		obj: PROV!Agent(
			id<- 'var:lifeline'
		),
		objRef: PROV!IDRef(
			ref<-obj.id
		),
		req: PROV!Entity(
			id<- 'var:starter',
			type<-'u2p:RequestMessage'
		),
		ac: PROV!Activity (
			id <- 'var:operation',
			type <- 'exe:'+sendMessage.signature.name
		),
		acRef: PROV!IDRef(
			ref<-ac.id
		),
		acRef2: PROV!IDRef(
			ref<-ac.id
		),
		reqRef: PROV!IDRef(
			ref<-req.id	
		),
		waw: PROV!Association(
			activity <- acRef2,
			agent <-objRef
		),
		wsb: PROV!Start(
			 activity<-acRef,
			 starter <- reqRef
		),
		doc: PROV!Document (
			agent <- obj,
			activity <- ac,
			entity <- req,
			wasStartedBy <- wsb,
			wasAssociatedWith <- waw
		)
	do{
				
		if(thisModule.thereIsInParams(sendMessage)){
				thisModule.newInputEntity(doc);
				thisModule.hadMember('var:starter', 'var:input', doc);
			
				inParam <- true;
		}
		if(thisModule.thereIsReply(sendMessage) and thisModule.thereIsOutReturnParams(sendMessage)){
				thisModule.genEntityWithTypeAndValue('var:output', 'var:outputType','var:outputValue', doc);
				
				thisModule.genEntityWithTypeAndValue('var:messageReply', 'u2p:ReplyMessage','', doc);
				thisModule.genWGBwithRole('var:messageReply', '', ac,doc);
				
				thisModule.hadMember('var:messageReply', 'var:output', doc);
				
				outParam<-true;
		}
		if(outParam){
				thisModule.genWDF('var:starter', 'var:messageReply' , doc);	
		}
		
	
		for (os in thisModule.orderedOcurrences) {
			if(os = ms.start){
				getOcurrence<- true;
			}

			if(getOcurrence){
				if(not os.oclIsTypeOf(UML!ExecutionOccurrenceSpecification)){
					if(not os.message.oclIsUndefined()){
						if(not isInformed and thisModule.belongsToTheSameLifeline(ms, os) and ( os.message.messageSort.toString()='asynchCall'	or os.message.messageSort.toString()='synchCall' or os.message.messageSort.toString()='createMessage')){
							
									thisModule.genEntityWithTypeAndValue('var:newRequest', 'u2p:RequestMessage','', doc);
									thisModule.genWGBwithRole('var:newRequest', 'u2p:RequestMessage', ac,doc);
									
									isInformed<- true;
						}
						
						if(not isInformedWithOutput and (thisModule.belongsToTheSameLifeline(ms, os)  and os.message.messageSort.toString()='reply')){

							--it is mandatory to have a reply if there is a synchCall, this reply will has an output
							thisModule.genEntityWithTypeAndValue('var:replyMessages', 'u2p:ReplyMessage','', doc);
							thisModule.genU_message('var:replyMessages', ac, doc);
							if(outParam){
								thisModule.genWDF_message('var:replyMessages', 'var:messageReply', doc)	;
							}
							
							isInformedWithOutput<- true;
						}
					}
				}
				if(ms.finish = os){
					getOcurrence<- false;
				}
			}

		}

		thisModule.setDocumentID(ms, doc);
		thisModule.documentRoot.document <- doc;
	}
}
